require = loadstring(game:GetObjects("rbxassetid://967517547")[1].Source)()
local theKey = require(10759199334)
local isPremium = false
local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/VisualRoblox/Roblox/main/UI-Libraries/Visual%20UI%20Library/Source.lua'))()
local Window = nil
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local root = character.HumanoidRootPart
local vm = game:GetService("VirtualInputManager")
local adminIds = {18770930, 124019182, 945001571, 91968776, 849206577, 2210661234, 149489769, 1783631538, 38097850, 341883196, 268646792, 66553053, 71915679, 100504006, 130903287, 1284723, 121372045, 130585012, 97411684, 63497590}
local synapse = false

local Name = "SkrillexHubReaper2.JSON"

local DefaultSettings = {

	WebHook = nil,
	BaseTransparency = 0.4,

}

local Settings

if not pcall(function() readfile(Name) end) then writefile(Name, game:service'HttpService':JSONEncode(DefaultSettings)) end

Settings = game:service'HttpService':JSONDecode(readfile(Name))

local function Save()
	writefile(Name,game:service'HttpService':JSONEncode(Settings))
end

local queue_on_teleport =
	queue_on_teleport or
	syn and
	syn.queue_on_teleport [[
       repeat wait() until game:IsLoaded() wait(5) print("ServerHoped or rejoined")
       loadstring(game:HttpGet(('https://raw.githubusercontent.com/IAmTheRealOne/SkrillexHubFree/main/' .. game.GameId)))()
   ]]

local dropdown2 = nil

function checkAdmin(plr)

	if isPremium == true then

		if dropdown2 == nil then

			return

		end

		for _, plr in pairs(game.Players:GetChildren()) do

			if table.find(adminIds, plr.UserId) or plr:GetRankInGroup(10270109) > 1 and plr.UserId ~= player.UserId then

				if dropdown2 == "Kick" then

					player:Kick("Admin Found: " .. plr.Name .. " ID: " .. plr.UserId)

				elseif dropdown2 == "Notify" then

					Library:CreateNotification('ADMIN ALERT!', "Admin Found: " .. plr.Name .. " ID: " .. plr.UserId, 5)

				elseif dropdown2 == "Rejoin" then

					local ts = game:GetService("TeleportService")

					ts:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)

				end

			else

				return false

			end
		end
	end
end

if theKey.CheckPaid(game.Players.LocalPlayer) == true then

	isPremium = true
	Window = Library:CreateWindow('Skrillex Hub Premium', 'Reaper 2 Premium', 'Skrillex Hub', '', true, 'SkrillexHubReaper2', 'Default')

else

	player:Kick()

	Window = Library:CreateWindow('Skrillex Hub', 'Reaper 2', 'Skrillex Hub', '', true, 'SkrillexHubReaper2', 'Default')

end

local players = game.Players

local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
	vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
	AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
	table.insert(AllIDs, actualHour)
	writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end

local player = game.Players.LocalPlayer
local hum = player.Character:WaitForChild("Humanoid")

local UIS = game:GetService("UserInputService")

if Settings.WebHook ~= nil then

	Library:CreateNotification('Skrillex Hub', "Current Webhook: " .. Settings.WebHook, 5)

end	

if isPremium == false then



end

local Tab = Window:CreateTab('Main', true, 'rbxassetid://3926305904', Vector2.new(524, 44), Vector2.new(36, 36))

local Section = Tab:CreateSection('Auto Farm')

local oldPos = nil
local safePartSize = nil

local choosenMob = nil
local autoFarm = false
local resetIfLowReiatsu = false
local autoEquip = true
local choosenWeapon = nil
local choosingWeapon = false
local nonWeapon = {}
local foundWeapon = nil
local autoChooseQuest = false
local distance = 5

if isPremium == false then

	local Toggle = Section:CreateToggle('Auto Mob', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)
		autoFarm = Value
	end)

	local Toggle = Section:CreateToggle('Reiatsu Reset', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)
		resetIfLowReiatsu = Value
	end)

	local mobs = {}
	local Dropdown = Section:CreateDropdown('Mobs', mobs, nil, 0, function(Value)
		choosenMob = Value
	end)

	for _, v in pairs(game.Workspace.Living:GetChildren()) do

		if not table.find(mobs, v.Name) and not game.Players:FindFirstChild(v.Name) then

			table.insert(mobs, v.Name)

		end

	end

	Dropdown:UpdateDropdown(mobs)

	local update = Section:CreateButton('Update Mobs', function()
		for _, v in pairs(game.Workspace.Living:GetChildren()) do

			if not table.find(mobs, v.Name) and not game.Players:FindFirstChild(v.Name) then

				table.insert(mobs, v.Name)

			end

		end

		Dropdown:UpdateDropdown(mobs)

	end)

	local Slider = Section:CreateSlider('Distance', 1, 15, 5, Color3.fromRGB(0, 125, 255), function(Value)
		distance = Value
	end)

	local Toggle = Section:CreateToggle('Safe Place', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)
		if Value == true then

			local part = Instance.new("Part", game.Workspace)
			part.Name = "SafePart"
			part.Anchored = true
			part.Position = Vector3.new(math.random(10000, 20000), 80000, math.random(10000, 100000))
			oldPos = player.Character.HumanoidRootPart.CFrame
			player.Character.HumanoidRootPart.CFrame = part.CFrame * CFrame.new(0, 10, 0)
			if safePartSize == nil then

				part.Size = Vector3.new(500, 25, 500)

			else

				part.Size = Vector3.new(safePartSize, 10 + (safePartSize * 0.05) , safePartSize)

			end

		elseif Value == false and game.Workspace:FindFirstChild("SafePart") then

			game.Workspace.SafePart:Destroy()
			player.Character.HumanoidRootPart.CFrame = oldPos


		end
	end)

end

local Toggle = Section:CreateToggle('Auto Equip', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)

	autoEquip = Value

	for _, v in pairs(character:GetChildren()) do

		if not table.find(nonWeapon, v.Name) then

			table.insert(nonWeapon, v.Name)

			foundWeapon = v.Name

		end
	end

	Library:CreatePrompt('TwoButton', 'Is this your weapon?', foundWeapon, {
		'No',
		function()
			choosingWeapon = true
		end,
		'Yes',
		function()
			choosenWeapon = foundWeapon
		end

	})

end)

local tablquest = {}
local questToAccept = nil
local quests = Section:CreateDropdown('Quests', tablquest, nil, 0, function(Value)

	if Value == nil then

		return

	end

	local args = {
		[1] = Value,
		[2] = workspace.NPCs:FindFirstChild(Value)
	}

	game:GetService("ReplicatedStorage").Remotes.TakeQuest:FireServer(unpack(args))

	questToAccept = Value

end)

local Toggle = Section:CreateToggle('Auto Accept Quest', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)
	autoChooseQuest = Value
end)

for _, v in pairs(game:GetService("Workspace").NPCs:GetChildren()) do

	if not table.find(tablquest, v.Name) and not game.Players:FindFirstChild(v.Name) and v:FindFirstChild("Dialogue") then

		for _, e in pairs(v.Dialogue:GetDescendants()) do

			if e.Name == "Quest" then

				if not table.find(tablquest, v.Name) then

					table.insert(tablquest, e.Value)

				end
			end

		end
	end

end

quests:UpdateDropdown(tablquest)

local EspActivated = false
local EspClicked = false
local autoQuest = false
local AutoRun = false
local skillsTable = {}
local aQuest
local hitCount = 0
local mode
local lowHp

local mouse = player:GetMouse()
local isHoldingW = false

mouse.KeyDown:connect(function(key)
	if key == "w" then
		isHoldingW = true
	end
end)

mouse.KeyUp:connect(function(key)
	if key == "w" then
		isHoldingW = false
	end
end)

local currentNpc = nil
local autoSecondary = false
local choosenSecondaries = {}
local hasFoundSecondary = false

game:GetService("RunService").Heartbeat:Connect(function()

	local succ, err = pcall(function()

		local character = player.Character or player.CharacterAdded:Wait()
		local root = character.HumanoidRootPart
		local hum = character.Humanoid

		if AutoRun == true then

			if isHoldingW == true then

				if game.Players.LocalPlayer.Character.Humanoid.WalkSpeed <= 20 then

					vm:SendKeyEvent(true, "W", false, game)

				end
			end
		end	

		if questToAccept then

			if autoChooseQuest == false then

				questToAccept = nil

			end

			local args = {
				[1] = questToAccept,
				[2] = workspace.NPCs:FindFirstChild(questToAccept)
			}

			game:GetService("ReplicatedStorage").Remotes.TakeQuest:FireServer(unpack(args))

		end

		for _, v in pairs(player.PlayerGui.Hotbar.Frame:GetChildren()) do

			local nam = v.Name

			if table.find(skillsTable, nam) then

				local skill = v

				if not skill:FindFirstChild("Cooldown") then

					firesignal(skill.Activated)

					local args = {
						[1] = {
							["inputType"] = Enum.UserInputType.MouseButton1,
							["keyCode"] = Enum.KeyCode.Unknown
						}
					}

					game:GetService("ReplicatedStorage").Remotes.Input:FireServer(unpack(args))

					firesignal(skill.Activated)

				end
			end
		end

		if choosingWeapon == true then

			choosingWeapon = false
			foundWeapon = nil

			task.wait(0.5)

			for _, v in pairs(character:GetChildren()) do

				if not table.find(nonWeapon, v.Name) then

					table.insert(nonWeapon, v.Name)

					foundWeapon = v.Name

				end
			end

			task.wait(0.5)

			Library:CreatePrompt('TwoButton', 'Is this your weapon?', foundWeapon, {
				'No',
				function()
					choosingWeapon = true
				end,
				'Yes',
				function()
					choosenWeapon = foundWeapon
				end

			})


		end

		if hitCount < 4 then

			if lowHp and mode then

				if character.Humanoid.Health <= lowHp then

					autoFarm = false

					player.Character.HumanoidRootPart.CFrame = CFrame.new(math.random(1000, 10000), math.random(10000, 20000), math.random(1000, 10000))

				end

			end	

			if autoFarm and choosenMob and player.Character then

				local mob = game.Workspace.Living:FindFirstChild(choosenMob)

				if currentNpc == nil or currentNpc:FindFirstChild("Humanoid") and currentNpc.Humanoid.Health > 0 then				
					currentNpc = mob
				else
					currentNpc = nil
				end

				if currentNpc then

					if currentNpc.Humanoid.Health > 0 then

						if resetIfLowReiatsu and player.Status.Reiatsu.Value <= 25 then

							hum.Health = 0

						end

						root.CFrame = currentNpc.HumanoidRootPart.CFrame * CFrame.new(0, distance, 0)
						root.CFrame = CFrame.new(root.Position, currentNpc.HumanoidRootPart.Position) --replace with orientation vector3 value)

						if not game.Players:FindFirstChild(mob.Name) then

							if currentNpc.Status.Blocking.Value == false then

								local args = {
									[1] = {
										["inputType"] = Enum.UserInputType.MouseButton1,
										["keyCode"] = Enum.KeyCode.Unknown
									}
								}

								game:GetService("ReplicatedStorage").Remotes.Input:FireServer(unpack(args))

							else

								hitCount = -3

								local args = {
									[1] = {
										["inputType"] = Enum.UserInputType.MouseButton2,
										["keyCode"] = Enum.KeyCode.Unknown
									}
								}

								game:GetService("ReplicatedStorage").Remotes.Input:FireServer(unpack(args))

							end

						else

							if game.Players:FindFirstChild(currentNpc.Name).Status.Blocking.Value == false then

								local args = {
									[1] = {
										["inputType"] = Enum.UserInputType.MouseButton1,
										["keyCode"] = Enum.KeyCode.Unknown
									}
								}

								game:GetService("ReplicatedStorage").Remotes.Input:FireServer(unpack(args))

							else

								hitCount = -3

								local args = {
									[1] = {
										["inputType"] = Enum.UserInputType.MouseButton2,
										["keyCode"] = Enum.KeyCode.Unknown
									}
								}

								game:GetService("ReplicatedStorage").Remotes.Input:FireServer(unpack(args))

							end

						end		

					else

						mob:Destroy()

					end
				end
			end

			if autoQuest == true then

				local quest = player.Data.Quests
				local str = string.split(quest.Value, "Kill ", " ")

				if string.match(quest.Value, "Hollow Slayer") then

					local killsLeft = string.sub(quest.Value, 26, 26)

					if killsLeft <= 0 then

						choosenMob = ""
						autoFarm = false
						autoQuest = false

					end

				end
			end

		end
	end)
end)

coroutine.wrap(function()

	while task.wait(0.3) do

		local succ, err = pcall(function()

			--[[if autoSecondary then

				local args = {
					[1] = "Roll Secondary"
				}

				game:GetService("ReplicatedStorage").Remotes.Purchase:FireServer(unpack(args))

				local text = game.Players.LocalPlayer.PlayerGui.ConfirmRaceChange.Frame.Title.Text
				local yes = game.Players.LocalPlayer.PlayerGui.ConfirmRaceChange.Frame.Yes
				local no = game.Players.LocalPlayer.PlayerGui.ConfirmRaceChange.Frame.No
				local newText = string.gsub(text, "You just rolled ", "")
				newText = string.gsub(newText, ". Do you accept it?", "")
				newText = string.gsub(newText, "?", "")
				local Found = table.find(choosenSecondaries, newText)
				
				task.wait(1)
				
				autoSecondary = false
				
				if Found then

					autoSecondary = false
					
					-- Script generated by SimpleSpy - credits to exx#9394

					local args = {
						[1] = "Yes"
					}

					game:GetService("ReplicatedStorage").Remotes.ConfirmRaceChange:FireServer(unpack(args))


				else

					-- Script generated by SimpleSpy - credits to exx#9394

					local args = {
						[1] = "No"
					}

					game:GetService("ReplicatedStorage").Remotes.ConfirmRaceChange:FireServer(unpack(args))
					
					
					task.wait(0.5)
					
					autoSecondary = true

				end

			end--]]

			if hitCount >= 4 then

				player.Character.HumanoidRootPart.CFrame = CFrame.new(math.random(1000, 10000), math.random(1000, 10000), math.random(1000, 10000))

				task.wait(1)

				hitCount = 0

			end

			if autoFarm or autoQuest then

				hitCount += 1

			end

			if choosenWeapon then

				if not character:FindFirstChild(choosenWeapon) then

					if autoEquip == true then

						local args = {
							[1] = {
								["inputType"] = Enum.UserInputType.Keyboard,
								["keyCode"] = Enum.KeyCode.E
							}
						}

						game:GetService("ReplicatedStorage").Remotes.Input:FireServer(unpack(args))

					end
				end
			end
		end)
	end

end)()

coroutine.wrap(function()

	while task.wait(2.5) do

		local succ, err = pcall(function()

			if autoSecondary then

				local args = {
					[1] = "Roll Secondary"
				}

				game:GetService("ReplicatedStorage").Remotes.Purchase:FireServer(unpack(args))

				local text = game.Players.LocalPlayer.PlayerGui.ConfirmRaceChange.Frame.Title.Text
				local yes = game.Players.LocalPlayer.PlayerGui.ConfirmRaceChange.Frame.Yes
				local no = game.Players.LocalPlayer.PlayerGui.ConfirmRaceChange.Frame.No
				local newText = string.gsub(text, "You just rolled ", "")
				newText = string.gsub(newText, ". Do you accept it?", "")
				newText = string.gsub(newText, "?", "")
				local Found = table.find(choosenSecondaries, newText)

				if Found then

					autoSecondary = false

					task.wait(1)

					game.ReplicatedStorage.Remotes.ConfirmRaceChange:FireServer("Yes");

					return

				end

				task.wait(1)

				game.ReplicatedStorage.Remotes.ConfirmRaceChange:FireServer("No");


			end

		end)
	end

end)()

local isTeleporting = false

local dropdown = nil
local dropdown2 = nil
local webhook = nil
local timer = nil
local dropdown3 = nil
local timeToNotify = ""
local nextTimeNotifyAt = nil

if Settings.WebHook ~= nil then

	webhook = Settings.WebHook

end

function Webhook(message, title)

	print(webhook)
	if title == nil then

		title = "Skrillex Hub Bot"

	end

	local url = webhook
	local data = {
		["content"] = "",
		["embeds"] = {
			{
				["title"] = title,
				["description"] = message,
				["type"] = "rich",
				["color"] = tonumber(0x7269da),
				["image"] = {
					["url"] = "http://www.roblox.com/Thumbs/Avatar.ashx?x=150&y=150&Format=Png&username=" ..
						tostring(game:GetService("Players").LocalPlayer.Name)
				}
			}
		}
	}
	local newdata = game:GetService("HttpService"):JSONEncode(data)

	local headers = {
		["content-type"] = "application/json"
	}
	request = http_request or request or HttpPost or syn.request
	local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
	request(abcdef)

end

local ASecondary = Section:CreateToggle('AutoSecondary', false, Color3.fromRGB(0, 125, 255), 0.1, function(Value)
	autoSecondary = Value
end)

if isPremium == true then

	local Toggle = Section:CreateToggle('Auto Mob', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)
		autoFarm = Value
	end)

	aQuest = Section:CreateToggle('Auto Quest', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)
		autoQuest = Value
		autoFarm = Value
	end)

	local Toggle = Section:CreateToggle('Reiatsu Reset', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)
		resetIfLowReiatsu = Value
	end)

	local mobs = {}
	local Dropdown = Section:CreateDropdown('Mobs', mobs, nil, 0, function(Value)
		choosenMob = Value
	end)

	local Slider = Section:CreateSlider('Distance', 1, 15, 5, Color3.fromRGB(0, 125, 255), function(Value)
		distance = Value
	end)

	local Toggle = Section:CreateToggle('Safe Place', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)
		if Value == true then

			local part = Instance.new("Part", game.Workspace)
			part.Name = "SafePart"
			part.Anchored = true
			part.Position = Vector3.new(math.random(10000, 20000), 80000, math.random(10000, 100000))
			oldPos = player.Character.HumanoidRootPart.CFrame
			player.Character.HumanoidRootPart.CFrame = part.CFrame * CFrame.new(0, 10, 0)
			if safePartSize == nil then

				part.Size = Vector3.new(500, 25, 500)

			else

				part.Size = Vector3.new(safePartSize, 10 + (safePartSize * 0.05) , safePartSize)

			end

		elseif Value == false and game.Workspace:FindFirstChild("SafePart") then

			game.Workspace.SafePart:Destroy()
			player.Character.HumanoidRootPart.CFrame = oldPos


		end
	end)

	for _, v in pairs(game.Workspace.Living:GetChildren()) do

		if not table.find(mobs, v.Name) and not game.Players:FindFirstChild(v.Name) then

			table.insert(mobs, v.Name)

		end

	end

	Dropdown:UpdateDropdown(mobs)

	local update = Section:CreateButton('Update Mobs', function()
		for _, v in pairs(game.Workspace.Living:GetChildren()) do

			if not table.find(mobs, v.Name) and not game.Players:FindFirstChild(v.Name) then

				table.insert(mobs, v.Name)

			end

		end

		Dropdown:UpdateDropdown(mobs)

	end)

	local Misc = Window:CreateTab('Misc', false, 'rbxassetid://3926305904', Vector2.new(524, 44), Vector2.new(36, 36))

	local MiscTab = Misc:CreateSection('Section')


	local ARun = MiscTab:CreateToggle('Auto Run', false, Color3.fromRGB(0, 125, 255), 0.1, function(Value)
		AutoRun = Value
	end)


	local PaidTab = Window:CreateTab('Paid', false, 'rbxassetid://3926305904', Vector2.new(524, 44), Vector2.new(36, 36))

	local Section2 = PaidTab:CreateSection('Section')

	local tablnpc = {}

	for _, v in pairs(game:GetService("Workspace").NPCs:GetChildren()) do

		if not table.find(tablnpc, v.Name) and not game.Players:FindFirstChild(v.Name) then

			table.insert(tablnpc, v.Name)

		end
	end

	local choosenNpc = nil
	local npc = Section2:CreateDropdown('Npcs', tablnpc, nil, 0, function(Value)

		if Value == nil then

			return

		end

		choosenNpc = Value

	end)

	local tptonpc = Section2:CreateButton('Tp To', function()

		local root = player.Character.HumanoidRootPart

		root.CFrame = game.Workspace.NPCs:FindFirstChild(choosenNpc).HumanoidRootPart.CFrame

	end)

	for _, v in pairs(game:GetService("Workspace").NPCs:GetChildren()) do

		if not table.find(tablnpc, v.Name) and not game.Players:FindFirstChild(v.Name) then

			table.insert(tablnpc, v.Name)

		end

	end

	local Input = Section2:CreateTextbox('Webhook (Only With Webhook Type)', '...', function(Value)
		Library:CreatePrompt('OneButton', 'Skrillex Hub', 'Sent Test Webhook', {
			'Alright',
			function()

			end
		})
		webhook = Value
		Settings.WebHook = Value
		Save()
		Webhook("Testing Webhook", nil)

	end)

	local Input = Section2:CreateTextbox('Mode When Low Hp', 'Mode Name...', function(Value)

		mode = Value

	end)

	local Slider99 = Section:CreateSlider('Hp For Mode', 1, hum.MaxHealth, hum.MaxHealth * 0.3, Color3.fromRGB(0, 125, 255), function(Value)
		lowHp = Value
	end)

	local Dropdown = Section2:CreateDropdown('Admin Detect', {'Nothing', 'Kick', 'Notify', 'Rejoin'}, 'Kick', 0.25, function(Value)
		dropdown2 = Value
	end)

	local Label

	local Dropdown5 = Section2:CreateDropdown('Auto Skill', {"1", "2", "3", "4", "5", "6", "7", "R", "T", "Y"}, nil, 0.25, function(Value)

		if not table.find(skillsTable, Value) then

			table.insert(skillsTable, Value)

		else

			table.remove(skillsTable, table.find(skillsTable, Value))

		end

		Label:UpdateLabel(table.concat(skillsTable, ", "))

	end)

	Label = Section2:CreateLabel(table.concat(skillsTable, ", "))

	local killPlayerV = false
	local firstTimeKillPlayer = false
	local playerToKill = nil

	local tpPlayer = Section2:CreateButton('Teleport To', function()

		if playerToKill ~= nil and game.Players:FindFirstChild(playerToKill) then

			player.Character.HumanoidRootPart.CFrame = game.Players:FindFirstChild(playerToKill).Character.HumanoidRootPart.CFrame

		else


			Library:CreatePrompt('OneButton', 'Skrillex Hub', 'Player Does Not Exist', {
				'Alright',
				function()

				end
			})

		end
	end)

	local Toggle = Section2:CreateToggle('Spectate', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)

		if playerToKill ~= nil or game.Players:FindFirstChild(playerToKill) then

			if Value == true then

				game.Workspace.Camera.CameraSubject = game.Players:FindFirstChild(playerToKill).Character.Humanoid

			else

				game.Workspace.Camera.CameraSubject = player.Character.Humanoid

			end

		else

			Library:CreatePrompt('OneButton', 'Skrillex Hub', 'Player Does Not Exist', {
				'Alright',
				function()

				end
			})

		end
	end)

	local Toggle = Section2:CreateToggle('Farm Player', false, Color3.fromRGB(0, 125, 255), 0.25, function(Value)

		if playerToKill ~= nil or game.Players:FindFirstChild(playerToKill) then

			if Value == true then

				autoFarm = true
				choosenMob = playerToKill

			else

				autoFarm = false
				choosenMob = nil

			end

		else

			Library:CreatePrompt('OneButton', 'Skrillex Hub', 'Player Does Not Exist', {
				'Alright',
				function()

				end
			})

		end
	end)

	local Slider2 = Section2:CreateSlider('Distance', 1, 15, 5, Color3.fromRGB(0, 125, 255), function(Value)
		distance = Value
	end)

	local playerstable = {}

	local ddi = Section2:CreateDropdown('Players', playerstable, nil, 0.1, function(Value)
		playerToKill = Value
	end)

	for _, v in pairs(game.Players:GetChildren()) do

		table.insert(playerstable, v.Name)

	end

	ddi:UpdateDropdown(playerstable)

	players.PlayerAdded:Connect(function(plr)

		for _, v in pairs(game.Players:GetChildren()) do

			table.insert(playerstable, v.Name)

		end

		ddi:UpdateDropdown(playerstable)

	end)

	players.PlayerRemoving:Connect(function(plr)

		for _, v in pairs(game.Players:GetChildren()) do

			table.insert(playerstable, v.Name)

		end

		ddi:UpdateDropdown(playerstable)

	end)

end

local PaidAutoRoll = Window:CreateTab('Auto Roll', false, 'rbxassetid://3926305904', Vector2.new(524, 44), Vector2.new(36, 36))

local PaidAutoRollTab = PaidAutoRoll:CreateSection('Section')

local RollSecondary = PaidAutoRollTab:CreateButton('Roll Secondary', function()

	local args = {
		[1] = "Roll Secondary"
	}

	game:GetService("ReplicatedStorage").Remotes.Purchase:FireServer(unpack(args))

end)

--[[local Label

local Input = PaidAutoRollTab:CreateTextbox('Secondary Name', '...', function(Value)

	if not table.find(choosenSecondaries, Value) then

		table.insert(choosenSecondaries, Value)

	else

		table.remove(choosenSecondaries, table.find(choosenSecondaries, Value))

	end

	Label:UpdateLabel(table.concat(choosenSecondaries, ", "))

end)

Label = PaidAutoRollTab:CreateLabel(table.concat(choosenSecondaries, ", "))

local ASecondary = PaidAutoRollTab:CreateToggle('Auto Secondary', false, Color3.fromRGB(0, 125, 255), 0.1, function(Value)
	autoSecondary = Value
end)
--]]


local SettingsTab = Window:CreateTab('Settings', false, 'rbxassetid://3926305904', Vector2.new(484, 44), Vector2.new(36, 36))

local SectionSettings = SettingsTab:CreateSection('General')

local isClosed = false

local Transparency = SectionSettings:CreateTextbox('Transparency (Restart)', Settings.BaseTransparency, function(Value)

	Settings.BaseTransparency = Value

	Save()

	Library:SetTransparency(tonumber(Settings.BaseTransparency), false)

end)

Library:SetTransparency(tonumber(Settings.BaseTransparency), false)

local Tab3 = Window:CreateTab('Discord/Info', false, 'rbxassetid://3926305904', Vector2.new(484, 44), Vector2.new(36, 36))

local Section3 = Tab3:CreateSection('Infos')

local Button = Section3:CreateButton('Join Discord', function()
	if syn then

		syn.request(
			{
				Url = "http://127.0.0.1:6463/rpc?v=1",
				Method = "POST",
				Headers = {
					["Content-Type"] = "application/json",
					["origin"] = "https://discord.com",
				},
				Body = game:GetService("HttpService"):JSONEncode(
				{
					["args"] = {
						["code"] = "KvM87FJHEj",
					},
					["cmd"] = "INVITE_BROWSER",
					["nonce"] = "."
				})
			})

	else

		setclipboard(tostring("https://discord.gg/KvM87FJHEj"))  

		Library:CreatePrompt('TwoButton', 'Skrillex Hub', 'Copied Link', {
			'Alright',
			'Fuck Off',
			function()

			end
		})
	end

end)

Paragraph = Section3:CreateParagraph('Creators', 'Made by Skrillex#6300 and Anima#1906')
